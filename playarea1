#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Oct  1 18:06:28 2020

@author: ms
"""

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 
  
from sklearn.cluster import DBSCAN 
from sklearn.preprocessing import StandardScaler 
from sklearn.preprocessing import normalize 
from sklearn.decomposition import PCA 


slopes =  [-0.575, -0.5522788203753352, -0.6533333333333333, -0.5771812080536913, -0.6235294117647059, -0.5842696629213483, -0.5652173913043478, -0.6481481481481481]
intercepts =  [506.275, 497.946380697051, 543.8, 508.3691275167786, 523.8588235294118, 512.8202247191011, 504.695652173913, 539.2407407407408]

"""
dict = {'slope': slopes, 'intercept': intercepts} 
df = pd.DataFrame(dict)

print(df.head())

# Numpy array of all the cluster labels assigned to each data point 
db_default = DBSCAN(eps = 0.0375, min_samples = 3).fit(df) 
labels = db_default.labels_ 

# Building the label to colour mapping 
colours = {} 
colours[0] = 'r'
colours[1] = 'g'
colours[2] = 'b'
colours[-1] = 'k'

# Building the colour vector for each data point 
cvec = [colours[label] for label in labels] 

# For the construction of the legend of the plot 
r = plt.scatter(df['slope'], df['intercept'], color ='r'); 
g = plt.scatter(df['slope'], df['intercept'], color ='g'); 
b = plt.scatter(df['slope'], df['intercept'], color ='b'); 
k = plt.scatter(df['slope'], df['intercept'], color ='k'); 

# Plotting slope on the X-Axis and intercept on the Y-Axis 
# according to the colour vector defined 
plt.figure(figsize =(9, 9)) 
plt.scatter(df['slope'], df['intercept'], c = cvec) 

# Building the legend 
plt.legend((r, g, b, k), ('Label 0', 'Label 1', 'Label 2', 'Label -1')) 
plt.show() 

"""
plt.scatter(slopes, intercepts)
plt.xlabel('slope')
plt.ylabel('intercept')
plt.show()
